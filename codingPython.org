#+TITLE: Coding Python

Does a literate-ish emacs document make a good place to learn python and develop the re-usable pieces I want for parsing lectionary data? Let's see.
* TO DO (SOMEDAY)
** Re-parse lectionary, intelligently computer parentheses for the opinionated track (I like to read all the text!)
i.e., `1 Samuel 8:4-11(12-15), 16-20(11:14-15)` should become `1 Samuel 8.4-20, 11.14-15`



* Reference
- [[https://linuxhint.com/configuring_emacs_python/][Configure like so]]
- [[https://orgmode.org/worg/org-contrib/babel/intro.html][Introduction to Babel]]
- Use C-c ' within the code block to edit
- Use C-c C-p within the editor to run it
- [[https://docs.python.org/3.9/][Python Doc's]]
- [[https://linuxhint.com/python_scripts_beginners_guide/][Python examples]]
- In interactive python, =dir(cmd)= is a great boon!
** Use python3
#+BEGIN_SRC bash
python3 --version
#+END_SRC

#+RESULTS:
: Python 3.9.1

#+BEGIN_SRC python :results output
  print ("Hello world!")
#+END_SRC

#+RESULTS:
: Hello world!

#+BEGIN_SRC python :results output
  import sys
  print (sys.version)
#+END_SRC

#+RESULTS:
: 2.7.16 (default, Nov 23 2020, 08:01:20)
: [GCC Apple LLVM 12.0.0 (clang-1200.0.30.4) [+internal-os, ptrauth-isa=sign+stri

#+BEGIN_SRC python :python python3 :results output
  import sys
  print (sys.version)
#+END_SRC

#+RESULTS:
: 3.9.1 (default, Jan  8 2021, 17:17:43)
: [Clang 12.0.0 (clang-1200.0.32.28)]
** Take a filename as input -- doesn't seem to work in babel?
#+BEGIN_SRC python :python python3 :results output :cmdline "a, b, c, 42"
import sys
if __name__ == "__main__":
    print(f"Arguments count: {len(sys.argv)}")
    for i, arg in enumerate(sys.argv):
        print(f"Argument {i:>6}: {arg}")
#+END_SRC

#+RESULTS:
: Arguments count: 1
: Argument      0:

** Traverse a text file
#+BEGIN_SRC python :python python3 :results output
  with open("collects.csv", "r") as f:
      for line in f:
          if (line[1:7]=="advent"):
              print (line[1:8])
#+END_SRC

#+RESULTS:
: advent1
: advent2
: advent3
: advent4

** Use the csv library
#+BEGIN_SRC python :python python3 :results output
  import csv
  with open("collects.csv", "r") as f:
      reader = csv.reader(f)
      for row in reader:
          if len(row[0])>0:
              print(row[0])
#+END_SRC

#+RESULTS:
#+begin_example
Code
advent1
advent2
advent3
advent4
nativity1
nativity2
nativity3
christmas1
holyname
christmas2
epiphany
epiphany1
epiphany2
epiphany3
epiphany4
presentation
epiphany5
epiphany6
epiphany7
epiphany8
epiphanylast
ashwednesday
lent1
lent2
lent3
lent4
lent5
annunciation
palmsunday
holymonday
holytuesday
holywednesday
maundythursday
goodfriday
holysaturday
vigil
easter
easterevening
eastermonday
eastertuesday
easterwednesday
easterthursday
easterfriday
eastersaturday
easter2
easter3
easter4
easter5
easter6
ascension
ascension-grant
easter7
pentecost-ogod
pentecost
trinity
visitation
proper1
proper2
proper3
proper4
proper5
proper6
proper7
proper8
proper9
proper10
proper11
proper12
proper13
proper14
proper15
proper16
proper17
proper18
proper19
holycross
proper20
proper21
proper22
proper23
thanksgivingcanadian
proper24
proper25
proper26
allsaints
proper27
proper28
proper29
thanksgivingusa
#+end_example

** Books of the Bible
Genesis
Exodus
Leviticus
Numbers
Deuteronomy
Joshua
Judges
Ruth
1 Samuel
2 Samuel
1 Kings
2 Kings
1 Chronicles
2 Chronicles
Ezra
Esther
Job
Psalms
Proverbs
Ecclesiastes
Song of Solomon
Isaiah
Jeremiah
Lamentations
Ezekiel
Daniel
Hosea
Joel
Amos
Obadiah
Jonah
Micah
Nahum
Habakkuk
Zephaniah
Haggai
Zechariah
Malachi
Tobit
Judith
Additions to Esther
Wisdom of Solomon
Sirach (Ecclesiasticus)
Baruch
1 Esdras
2 Esdras
Letter of Jeremiah
Prayer of Azariah and the Song of the Three Jews
Susanna
Bel and the Dragon
1 Maccabees
2 Maccabees
3 Maccabees
4 Maccabees
Prayer of Manasseh
Matthew
Mark
Luke
John
Acts of the Apostles
Romans
1 Corinthians
2 Corinthians
Galatians
Ephesians
Philippians
Colossians
1 Thessalonians
2 Thessalonians
1 Timothy
2 Timothy
Titus
Philemon
Hebrews
James
1 Peter
2 Peter
1 John
2 John
3 John
Jude
Revelation

** Archive
*** Produce Psalms in =readings/pss/plaintext=
Format:
  - Blank line between Psalms/parts
  - # Psalm number (filename)
  - ## Part of Psalm or letter for Ps 119 (bold)
  - ### Latin title (italic)
  - Add "Part" to filename for those that contain the keyword
  - Psalm119: add a \n for each new letter heading

#+BEGIN_SRC python :python python3 :results output
  import os
  targetdir = "readings/pss/plaintext/"
  os.makedirs(targetdir, exist_ok=True)

  countLines = 0
  countPsalms = 0
  previousLine = ""
  with open("psalter.txt", "r") as f:
      line = f.readline().rstrip()
      while line:
          if (line[0:2] != "# "):
              print ("Unexpected input: " + line)
              break;
          # New Psalm
          countPsalms += 1
          countLines += 2
          title = line[2:]
          # Check for Part I/Part II
          line = f.readline().rstrip()
          countLines += 1
          if (title != "119" and line[0:3] == "## "):
              title = title + line[3:].replace (" ", "")
          # Open new file for writing
          with open (targetdir + "/" + title, "w") as t:
              while (len(line)>0):
                  if (line[0:3] == "## "):
                      if (title == "119" and line != "## Aleph"):
                          t.write("\n")
                      t.write(line[3:] + "\n")
                  elif (line[0:4] == "### "):
                      t.write(line[4:] + "\n")
                  else:
                      t.write(line + "\n")
                  line = f.readline().rstrip()
                  countLines += 1
          line = f.readline().rstrip()
  print ("Wrote " + str(countLines) + " lines in " + str(countPsalms) + " files.")
#+END_SRC

#+RESULTS:
: Wrote 6328 lines in 157files.
*** Produce Psalms in =readings/pss/plain=
Format:
  - Blank line between Psalms/parts
  - # Psalm number (filename)
  - ## Part of Psalm or letter for Ps 119 (bold)
  - ### Latin title (italic)
  - Add "Part" to filename for those that contain the keyword
  - Psalm119: add a \n for each new letter heading

#+BEGIN_SRC python :python python3 :results output
  import os
  targetdir = "readings/pss/plain/"
  os.makedirs(targetdir, exist_ok=True)

  countLines = 0
  countPsalms = 0
  previousLine = ""
  with open("psalter.txt", "r") as f:
      line = f.readline().rstrip()
      while line:
          if (line[0:2] != "# "):
              print ("Unexpected input: " + line)
              break;
          # New Psalm
          countPsalms += 1
          countLines += 2
          title = line[2:]
          # Check for Part I/Part II
          line = f.readline().rstrip()
          countLines += 1
          if (title != "119" and line[0:3] == "## "):
              title = title + line[3:].replace (" ", "")
          # Open new file for writing
          with open (targetdir + "/" + title, "w") as t:
              while (len(line)>0):
                  if (line[0:3] == "## "):
                      if (title == "119" and line != "## Aleph"):
                          t.write("\n")
                      t.write("**" + line[3:] + "**" + "\n")
                  elif (line[0:4] == "### "):
                      t.write("_" + line[4:] + "_" + "\n")
                  else:
                      t.write(line + "\n")
                  line = f.readline().rstrip()
                  countLines += 1
          line = f.readline().rstrip()
  print ("Wrote " + str(countLines) + " lines in " + str(countPsalms) + " files.")
#+END_SRC

#+RESULTS:
: Wrote 6328 lines in 157files.
*** Produce Psalms in =readings/pss/responsively=
Format:
  - Blank line between Psalms/parts
  - # Psalm number (filename)
  - ## Part of Psalm or letter for Ps 119 (bold)
  - ### Latin title (italic)
  - Add "Part" to filename for those that contain the keyword
  - Psalm119: add a \n for each new letter heading

#+BEGIN_SRC python :python python3 :results output
  import os
  targetdir = "readings/pss/responsively/"
  os.makedirs(targetdir, exist_ok=True)

  countLines = 1
  countPsalms = 0
  with open("psalter.txt", "r") as f:
      line = f.readline().rstrip()
      while line:
          if (line[0:2] != "# "):
              print ("Unexpected input: " + line)
              break;
          countPsalms += 1
          title = line[2:]

          # Check for Part I/Part II
          line = f.readline().rstrip()
          countLines += 1
          if (title != "119" and line[0:3] == "## "):
              title = title + line[3:].replace (" ", "")

          # Open new file for writing
          with open (targetdir + "/" + title, "w") as t:
              newPsalm = True
              responseOpen = False
              while (len(line)>0):
                  if not newPsalm:
                      t.write ("\n")
                  if (line[0:3] == "## "): # Part or Letter
                      if (title == "119"):
                          if (newPsalm):
                            t.write("_" + line[3:] + "_\n")
                          else:
                              t.write ("\n_" + line[3:] + "_")
                      else:
                          t.write("_" + line[3:] + "_\n")
                      line = f.readline().rstrip()
                  elif (line[0:4] == "### "): # latin title
                      if (title == "119"):
                          t.write("_" + line[4:] + "_\n")
                      else:
                          t.write("_" + line[4:] + "_\n\n")
                      line = f.readline().rstrip()
                  else:
                      if (line[0].isdigit()):
                          responseOpen = not newPsalm and not responseOpen
                          newPsalm = False
                          if responseOpen:
                              t.write ("> **" + line)
                          else:
                              t.write ("> " + line)
                      else:
                          t.write (line)
                      line = f.readline().rstrip()
                      countLines += 1
                      if (responseOpen and (len(line) == 0 or line[0].isdigit())):
                          t.write("**\n") # two \n's on purpose
              line = f.readline().rstrip() # Drew a blank: try for another line
  print ("Wrote " + str(countLines) + " lines in " + str(countPsalms) + " files.")
#+END_SRC

#+RESULTS:
: Wrote 5801 lines in 157 files.
*** Dump collects into directory =collects=
#+BEGIN_SRC python :python python3 :results output
  import csv, os
  targetdir = "collects"
  os.makedirs(targetdir, exist_ok=True)
  count=0
  with open("collects.csv", "r") as f:
      reader = csv.reader(f)
      for row in reader:
          if row[0] == "Code": continue # Skip header row
          if len(row[0])<3: continue   # Skip uncoded or badly coded rows
          count+=1
          with open (targetdir + "/" + row[0], "w") as t:
            t.write(row[1])
  print ("Wrote " + str(count) + " records")
#+END_SRC

#+RESULTS:
: Wrote 118 records

*** Aborted: Produce Bible References for Yr B, Track 1 in =readings/refs/yearb/=
ISSUE: Already done by a different means. Not yet published into sharedprayers. Abandoning this effort.
Issues:
  - "Ecclesiaticus" collides with Ecclesiastes; use "Sirach" instead
  - someday track to could be added with alternate filenames
Create a directory for each week-code.
Name files =lesson1=, =lesson2=, =psalm=, =gospel=

#+BEGIN_SRC python :python python3 :results output
  import csv, os
  srcfile = "src/refs-ybt1.csv"
  targetdir = "output/readings/refs/yearb/"
  codeColumn = 1
  psalmColumn = 3
  lesson1Column= 4
  lesson2Column = 5
  gospelColumn = 6

  os.makedirs(targetdir, exist_ok=True)

  count=0
  with open(srcfile, "r") as f:
      reader = csv.reader(f)
      next(reader) # skip header line
      for row in reader:
          if row[codeColumn] == "": continue # Skip unused rows
          code = row[codeColumn].strip()
          gospel = ""
          if (row[gospelColumn]
          print (code[gospelColumn].strip())
          count+=1
  print ("Wrote " + str(count) + " records.")
#+END_SRC

#+RESULTS:

          with open (targetdir + "/" + code, "w") as t:
              t.write(row[introColumn])
*** Get a single Bible text
Source = [[http://bible.oremus.org/api.html][oremus api]]
=GET http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=no&omithidden=YES&passage=Mark%201.1-11
#+BEGIN_SRC python :python python3 :results output
  import os, urllib.request, urllib.parse, re
  from bs4 import BeautifulSoup

  requestSlug = "http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=NO&omithidden=YES&passage={0}"

  contents = urllib.request.urlopen(requestSlug.format(urllib.parse.quote_plus("Ex 20.1-17"))).read().decode('utf-8')

  # Fix up the contents items I want to handle before BeautifulSoup
  # contents = contents.replace('<br class="kk"/>', "BREAK")
  contents = contents.replace("<span class=thinspace> </span>", "")

  soup = BeautifulSoup(contents, 'html.parser')

  bibletext = soup.find('div', {'class': 'bibletext'})
  for br in soup.find_all("br"):
      br.replace_with("BREAK")
  print("bibletext")
  print(bibletext)
  result = ''
  for line in bibletext.findAll("p"):
     modline = line.text
     modline = re.sub("\n", " ", modline)
     modline = re.sub("  ", " ", modline)
     modline = re.sub(" ", " ", modline) # clean out non-breaking spaces
     modline = re.sub("BREAK", "\n> ", modline) # preserve coded line breaks
     if (len(modline) - modline.count(' ') > 1):
         result += modline.rstrip().rstrip('>').rstrip() + "\n\n"
  result.replace("BREAK", "\n")
  print ("FINISHED RESULT:")
  print (result)


  #+END_SRC


* Generate lectionary data
** =/proper/collect=, =preface=, =title= for Sundays and Holy Days
Sundays & Holy Days taken from Calendar (BCP 15ff)

Input file columns:
0: Order (ignored)
1: code (based on title)
2: Collect (Contemporary: BCP 211ff.)
3: Preface (BCP 211ff.)
4: Title (BCP 31ff.)

Dump multiple columns into directory =proper=
Each column gets its own sub-directory. Each entry is named with the week-code. e.g., =proper/collect/epiphany3=

Most Holy Days have the same readings from year to year. All Saints and Thanksgiving are the exceptions. Therefore these get listead as allsaintsa, allsaintsb, allsaintsc, thanksgivinga, etc.


#+BEGIN_SRC python :python python3 :results output
  import csv, os
  inputfile = "src/collects.csv"
  targetdir = "output/proper/"
  codeColumn = 1
  fields = {
      "collect": 2,
      "preface": 3,
      "title": 4
  }

  for dir in fields.keys():
    os.makedirs(targetdir + dir, exist_ok=True)

  count=0
  with open(inputfile, "r") as f:
      reader = csv.reader(f)
      next(reader) # skip header line
      for row in reader:
          if row[0] == "999": continue # Skip unused rows
          code = row[1]
          if len(code)<3: continue   # Skip uncoded or badly coded rows
          count+=1
          for dir, column in fields.items():
              with open (targetdir + dir + "/" + code, "w") as t:
                  t.write(row[column])
  print ("Wrote " + str(count) + " records for each of " + str(len(fields)) + " fields.")
#+END_SRC

#+RESULTS:
: Wrote 119 records for each of 3 fields.
** How to introduce each book of Bible: =/readings/intro=
Issue:
  - Philippians and Philemon require five characters to distinguish
  - Job 1 and Job 2 should use the same entry
 This sounds like a job for a regular expression!
 I like =^..[a-z]{1,3}= but the online testers don't catch the leading numerals. Maybe the fault of the javascript implementation?
Each file is named with the first five non-space characters, in lower case.

#+BEGIN_SRC python :python python3 :results output
  import csv, os
  targetdir = "output/readings/intro/"
  codeColumn = 1
  introColumn = 2

  os.makedirs(targetdir, exist_ok=True)

  count=0
  with open("src/booksofbible.csv", "r") as f:
      reader = csv.reader(f)
      next(reader) # skip header line
      for row in reader:
          if row[0] == "": continue # Skip unused rows
          code = row[1].lower().replace(" ","")[0:5]
          count+=1
          with open (targetdir + "/" + code, "w") as t:
              t.write(row[introColumn])
  print ("Wrote " + str(count) + " records.")
#+END_SRC

#+RESULTS:
: Wrote 82 records.

** Psalms: =/readings/pss/plaintext=, =markdown=, =responsively=
Load each Psalm into memory at once, then format & output as needed
Format of input file:
  - Blank line between Psalms
  - # Psalm number (filename)
  - ## Part of Psalm or letter for Ps 119 (bold)
  - ### Latin title (italic)
  - When Parts/titles occur mid-Psalm, give an extra \n above it

#+BEGIN_SRC python :python python3 :results output
  import os
  targetdir_plaintext = "output/readings/pss/plaintext/"
  targetdir_markdown  = "output/readings/pss/markdown/"
  targetdir_responsively = "output/readings/pss/responsively/"
  os.makedirs(targetdir_plaintext, exist_ok=True)
  os.makedirs(targetdir_markdown, exist_ok=True)
  os.makedirs(targetdir_responsively, exist_ok=True)

  countPsalms = 0
  countLines = 0
  countFiles = 0
  with open("src/psalter.txt", "r") as f:
      line = f.readline().rstrip()
      countLines += 1
      while len(line) > 1:
          if (line[0:2] != "# "):
              print ("Unexpected input: " + line)
              break;
          countPsalms += 1
          title = line[2:]

          # Read in entire Psalm
          psalm = []
          line = f.readline()
          countLines += 1
          while len(line) > 1:
              psalm.append(line.rstrip())
              line = f.readline()
              countLines += 1

          # Output plaintext Psalm
          atTheBeginning = 2
          with open (targetdir_plaintext + "/" + title, "w") as t:
              countFiles += 1
              for l in psalm:
                  if (l[0:3] == "## "):
                      if (atTheBeginning <= 0 and l[0] == "#"):
                          t.write("\n")
                      t.write(l[3:] + "\n")
                  elif (l[0:4] == "### "):
                      t.write(l[4:] + "\n")
                  else:
                      t.write(l + "\n")
                  atTheBeginning -= 1

          # Output markdown Psalm
          atTheBeginning = 2
          with open (targetdir_markdown + "/" + title, "w") as t:
              countFiles += 1
              for l in psalm:
                  if (l[0:3] == "## "):
                      if (atTheBeginning <= 0 and l[0] == "#"):
                          t.write("\n")
                      t.write("**" + l[3:] + "**\n")
                  elif (l[0:4] == "### "):
                      t.write("_" + l[4:] + "_\n\n")
                  else:
                      l = l.replace(" *", " \\*")
                      t.write("> " + l + "  \n")
                  atTheBeginning -= 1

          # Output responsive Psalm
          foundAVerse = False
          isEven = False
          with open (targetdir_responsively + "/" + title, "w") as t:
              countFiles += 1
              for l in psalm:
                  if (foundAVerse):
                      # If not the beginnig of the Psalm, finish off the last line
                      if (isEven and (l[0].isdigit() or l[0] == "#")):
                          t.write("**  \n") # extra line between pairs
                      t.write("  \n")

                  # Process the line
                  if (l[0:3] == "## "):
                      t.write("**" + l[3:] + "**\n")
                      isEven = False
                      foundAVerse = False
                  elif (l[0:4] == "### "):
                      t.write("_" + l[4:] + "_\n\n")
                      isEven = False
                      foundAVerse = False
                  else:
                      if (l[0].isdigit()):
                          t.write("> ")
                          if (foundAVerse):
                              isEven = not isEven
                          if (isEven):
                              t.write("**")
                          foundAVerse = True
                      l = l.replace(" *", " \\*")
                      t.write(l)
              # If not the beginnig of the Psalm, finish off the last line
              if (isEven):
                  t.write("**")
              t.write("  \n")
          line = f.readline().rstrip()
          countLines += 1
  print ("Wrote " + str(countLines) + " lines in " + str(countFiles) + " files for " + str(countPsalms) + " Psalms.")
#+END_SRC

#+RESULTS:
: Wrote 6060 lines in 450 files for 150 Psalms.

** Eucharistic Lectionary: =readings/yearb/opinionated=, =track1=, =track2=
*** Parse =src/bcprcl-yearb.txt=
Format:
|-----------------------------|
| week-code                   |
| Psalm                       |
| First Reading               |
| Second Reading              |
| Gospel                      |
| Opt. Track II Psalm         |
| Opt. Track II First Reading |
| Blank Line                  |

**** Test out file format
#+BEGIN_SRC python :python python3 :results output
  import os
  srcfile = "src/bcprcl-yearb.txt"
  countRecords = 0
  with open(srcfile, "r") as f:
      weekcode = f.readline().rstrip()
      while weekcode:
          # print ("Week found: " + weekcode)
          countRecords += 1
          f.readline().rstrip()
          f.readline().rstrip()
          f.readline().rstrip()
          f.readline().rstrip()
          nextLine = f.readline().rstrip()
          if nextLine:
              altReading = f.readline().rstrip()
              # print ("Track II? "+ nextLine + " - " + altReading)
              f.readline().rstrip()
          weekcode = f.readline().rstrip()
  print ("Found " + str(countRecords) + " records")
#+END_SRC

#+RESULTS:
: Found 85 records
**** Parse out file
#+BEGIN_SRC python :python python3 :results output
  import os
  import shutil
  srcfile = "src/bcprcl-yearb.txt"
  track1 = "output/readings/yearb/track1/"
  track2 = "output/readings/yearb/track2/"
  opinionated = "output/readings/yearb/opinionated/"
  countRecords = 0
  shutil.rmtree(track1, ignore_errors=True)
  shutil.rmtree(track2, ignore_errors=True)
  shutil.rmtree(opinionated, ignore_errors=True)

  with open(srcfile, "r") as f:
      weekcode = f.readline().rstrip()
      while weekcode:
          countRecords += 1
          psalm = f.readline().rstrip()
          firstReading = f.readline().rstrip()
          secondReading = f.readline().rstrip()
          gospel = f.readline().rstrip()
          nextLine = f.readline().rstrip()
          if nextLine:
              altPsalm = nextLine
              altReading = f.readline().rstrip()
              if f.readline().rstrip():
                  raise Exception("Unexpected input near " + weekcode + ": " + nextLine)

          # Output track 1 readings
          dest = track1 + weekcode + "/"
          os.makedirs(dest, exist_ok=False)
          with open (dest + "psalm", "w") as t:
              t.write(psalm)
          with open (dest + "gospel", "w") as t:
              t.write(gospel)
          if firstReading:
              with open (dest + "firstReading", "w") as t:
                  t.write(firstReading)
          if secondReading:
              with open (dest + "secondReading", "w") as t:
                  t.write(secondReading)
          if nextLine:
              with open (dest + "track2psalm", "w") as t:
                  t.write(altPsalm)
              with open (dest + "track2Reading", "w") as t:
                  t.write(altReading)

          # Output track 2 readings
          dest = track2 + weekcode + "/"
          os.makedirs(dest, exist_ok=False)
          with open (dest + "gospel", "w") as t:
              t.write(gospel)
          if secondReading:
              with open (dest + "secondReading", "w") as t:
                  t.write(secondReading)
          if nextLine:
              with open (dest + "psalm", "w") as t:
                  t.write(altPsalm)
              with open (dest + "firstReading", "w") as t:
                  t.write(altReading)
          else:
              with open (dest + "psalm", "w") as t:
                  t.write(psalm)
              if firstReading:
                  with open (dest + "firstReading", "w") as t:
                      t.write(firstReading)


          # Output opinionated readings
          ## 1: Follow Track 1
          ## 2: if a canticle, choose second (Rite II)
          ## 3: else choose the first option ("or")
          ## 4: Easter, Pentecost: choose Heb reading, use Acts 2nd
          dest = opinionated + weekcode + "/"
          os.makedirs(dest, exist_ok=False)
          # When there are choices to be made ("or"), choose the first
          with open (dest + "psalm", "w") as t:
              if psalm.find("Canticle") == 0:
                  psalm = "Canticle " + psalm.partition(" or ")[2].lstrip()
              t.write(psalm.partition(" or ")[0])
          with open (dest + "gospel", "w") as t:
              t.write(gospel.partition(" or ")[0])
          if firstReading:
              if weekcode.find("resurrection") * weekcode.find("pentecost1") * weekcode.find("pentecost2") == 0:
                  firstReading = firstReading.partition(" or ")[2]
                  secondReading = secondReading.partition(" or ")[2]
              with open (dest + "firstReading", "w") as t:
                  t.write(firstReading.partition(" or ")[0])
          if secondReading:
              with open (dest + "secondReading", "w") as t:
                  t.write(secondReading.partition(" or ")[0])

          # Start next line
          weekcode = f.readline().rstrip()
  print ("Parsed " + str(countRecords) + " records")
#+END_SRC

#+RESULTS:
: Parsed 85 records

** Eucharistic Lectionary for Holy Days: =readings/holydays/withoptions=, =opinionated=
*** Parse =src/bcprcl-holydays.txt=
Format:
|-----------------------------|
| week-code                   |
| date                        |
| Psalm                       |
| First Reading               |
| Second Reading              |
| Gospel                      |
| Blank Line                  |

*** Test out file format
#+BEGIN_SRC python :python python3 :results output
  import os
  srcfile = "src/bcprcl-holydays.txt"
  countRecords = 0
  with open(srcfile, "r") as f:
      weekcode = f.readline().rstrip()
      while weekcode:
          # print ("Week found: " + weekcode)
          countRecords += 1
          recdate = f.readline().rstrip() # Date
          recpsalm = f.readline().rstrip() #Psalm
          rectnk = f.readline().rstrip() # Heb Rdg
          recepi = f.readline().rstrip() # Epistle Rdg
          recgos = f.readline().rstrip() # Gospel Rdg
          # print("DEBUG: " + weekcode + ": " + recgos)
          nextLine = f.readline().rstrip() # Blank
          if nextLine:
              raise Exception("Unexpected input near " + weekcode + ": " + nextLine)
          weekcode = f.readline().rstrip()
  print ("Found " + str(countRecords) + " records")
#+END_SRC

#+RESULTS:
: Found 35 records

*** Parse out file
Code below is from parsing YearB - redo for Holy Days
Simplified by creating separate codes for allsaints/thanksgiving years a/b/c: e.g., thanksgivingb
Change Holy Day reading for St. Luke from Ecclesiaticus to Sirach to avoid confusion(?)

#+BEGIN_SRC python :python python3 :results output
    import os
    srcfile = "src/bcprcl-holydays.txt"
    opinionated = "output/readings/holydays/opinionated/"
    original = "output/readings/holydays/withoptions/"
    countRecords = 0
    with open(srcfile, "r") as f:
        weekcode = f.readline().rstrip()
        while weekcode:
            # print ("Week found: " + weekcode)
            countRecords += 1
            recdate = f.readline().rstrip() # Date
            recpsalm = f.readline().rstrip() #Psalm
            rectnk = f.readline().rstrip() # Heb Rdg
            recepi = f.readline().rstrip() # Epistle Rdg
            recgos = f.readline().rstrip() # Gospel Rdg
            # print("DEBUG: " + weekcode + ": " + recgos)
            nextLine = f.readline().rstrip() # Blank
            if nextLine:
                raise Exception("Unexpected input near " + weekcode + ": " + nextLine)

            # Output records
            # Output original readings (sometimes having options indicated by "or")
            dest = original + weekcode + "/"
            os.makedirs(dest, exist_ok=False)
            with open (dest + "psalm", "w") as t:
                t.write(recpsalm)
            if rectnk:
                with open (dest + "firstReading", "w") as t:
                    t.write(rectnk)
            if recepi:
                with open (dest + "secondReading", "w") as t:
                    t.write(recepi)
            with open (dest + "gospel", "w") as t:
                t.write(recgos)

            # Output opinionated readings
            ## Always choose the first option ("or")
            dest = opinionated + weekcode + "/"
            os.makedirs(dest, exist_ok=False)
            with open (dest + "psalm", "w") as t:
                t.write(recpsalm.partition(" or ")[0])
            if rectnk:
                with open (dest + "firstReading", "w") as t:
                    t.write(rectnk.partition(" or ")[0])
            if recepi:
                with open (dest + "secondReading", "w") as t:
                    t.write(recepi.partition(" or ")[0])
            with open (dest + "gospel", "w") as t:
                t.write(recgos.partition(" or ")[0])

            weekcode = f.readline().rstrip()
    print ("Found " + str(countRecords) + " records")
#+END_SRC

#+RESULTS:
: Found 35 records
** Get the RCL Bible texts
Next time: get code from below for holy days to check for already downloaded passages &  avoid duplicating downloads (instead of abusing oremus)
Source = [[http://bible.oremus.org/api.html][oremus api]]
=GET http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=no&omithidden=YES&passage=Mark%201.1-11
#+BEGIN_SRC python :python python3 :results output
  import os, urllib.request, urllib.parse, re, shutil, time
  from bs4 import BeautifulSoup

  def getText(ref):
      requestSlug = "http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=NO&omithidden=YES&passage={0}"
      contents = urllib.request.urlopen(requestSlug.format(urllib.parse.quote_plus(ref))).read().decode('utf-8')

      # Fix up the contents items I want to handle before BeautifulSoup
      contents = contents.replace("<span class=thinspace> </span>", "")

      soup = BeautifulSoup(contents, 'html.parser')
      bibletext = soup.find('div', {'class': 'bibletext'})
      for br in soup.find_all("br"):
          br.replace_with("BREAK")
      result = ''
      for line in bibletext.findAll("p"):
         modline = line.text
         modline = re.sub("\n", " ", modline)
         modline = re.sub("  ", " ", modline)
         modline = re.sub(" ", " ", modline) # clean out non-breaking spaces
         modline = re.sub("BREAK", "\n> ", modline) # preserve coded line breaks
         if (len(modline) - modline.count(' ') > 1):
             result += modline.rstrip().rstrip('>').rstrip() + "\n\n"
      result.replace("BREAK", "\n")
      return result.rstrip()

  def textfilename(ref):
      result = re.sub("[-,.:;()\* ]", "", ref)
      return result.casefold()

  srcfile = "src/bcprcl-yearb.txt"
  dest = "output/readings/nrsv/"
  countRecords = 0
  countRefs = 0
  refs = []
  os.makedirs(dest, exist_ok=True)

  with open(srcfile, "r") as f:
      weekcode = f.readline().rstrip()
      while weekcode:
          countRecords += 1
          psalm = f.readline().rstrip()
          firstReading = f.readline().rstrip()
          secondReading = f.readline().rstrip()
          gospel = f.readline().rstrip()
          nextLine = f.readline().rstrip()
          altReading = ""
          if nextLine:
              altPsalm = nextLine
              altReading = f.readline().rstrip()
              if f.readline().rstrip():
                  raise Exception("Unexpected input near " + weekcode + ": " + nextLine)

          # Queue up the readings
          for line in [firstReading, secondReading, gospel, altReading]:
              t = line.partition(" or ")
              if (t[0]) and t[0] not in refs:
                  refs.append(t[0])
              while (t[2]):
                  t = t[2].partition(" or ")
                  if t[0] not in refs:
                      refs.append(t[0])

          countRefs += len(refs)
          while refs:
              r = refs.pop()
              print (textfilename(r) + ": " + r)
              with open (dest + textfilename(r), "w") as t:
                  t.write(getText(r))
          time.sleep(2)

          # Start next line
          weekcode = f.readline().rstrip()
  print ("Parsed " + str(countRecords) + " records with " + str(countRefs) + " scripture references")
#+END_SRC

#+RESULTS:
#+begin_example
mark132437: Mark 13:24-37
1corinthians139: 1 Corinthians 1:3-9
isaiah6419: Isaiah 64:1-9
mark118: Mark 1:1-8
2peter3815a: 2 Peter 3:8-15a
isaiah40111: Isaiah 40:1-11
john1681928: John 1:6-8,19-28
1thessalonians51624: 1 Thessalonians 5:16-24
isaiah6114811: Isaiah 61:1-4,8-11
luke12638: Luke 1:26-38
romans162527: Romans 16:25-27
2samuel711116: 2 Samuel 7:1-11,16
luke21141520: Luke 2:1-14,(15-20)
titus21114: Titus 2:11-14
isaiah927: Isaiah 9:2-7
luke217820: Luke 2:(1-7),8-20
titus347: Titus 3:4-7
isaiah62612: Isaiah 62:6-12
john1114: John 1:1-14
hebrews114512: Hebrews 1:1-4,(5-12)
isaiah52710: Isaiah 52:7-10
john1118: John 1:1-18
galatians32325447: Galatians 3:23-25; 4:4-7
isaiah6110—623: Isaiah 61:10—62:3
luke21521: Luke 2:15-21
philippians2511: Philippians 2:5-11
galatians447: Galatians 4:4-7
numbers62227: Numbers 6:22-27
matthew2112: Matthew 2:1-12
luke24152: Luke 2:41-52
matthew213151923: Matthew 2:13-15,19-23
ephesians1361519a: Ephesians 1:3-6,15-19a
jeremiah31714: Jeremiah 31:7-14
matthew2112: Matthew 2:1-12
ephesians3112: Ephesians 3:1-12
isaiah6016: Isaiah 60:1-6
mark1411: Mark 1:4-11
acts1917: Acts 19:1-7
genesis115: Genesis 1:1-5
john14351: John 1:43-51
1corinthians61220: 1 Corinthians 6:12-20
1samuel31101120: 1 Samuel 3:1-10,(11-20)
mark11420: Mark 1:14-20
1corinthians72931: 1 Corinthians 7:29-31
jonah31510: Jonah 3:1-5,10
mark12128: Mark 1:21-28
1corinthians8113: 1 Corinthians 8:1-13
deuteronomy181520: Deuteronomy 18:15-20
mark12939: Mark 1:29-39
1corinthians91623: 1 Corinthians 9:16-23
isaiah402131: Isaiah 40:21-31
mark14045: Mark 1:40-45
1corinthians92427: 1 Corinthians 9:24-27
2kings5114: 2 Kings 5:1-14
mark2112: Mark 2:1-12
2corinthians11822: 2 Corinthians 1:18-22
isaiah431825: Isaiah 43:18-25
mark21322: Mark 2:13-22
2corinthians316: 2 Corinthians 3:1-6
hosea21420: Hosea 2:14-20
mark929: Mark 9:2-9
2corinthians436: 2 Corinthians 4:3-6
2kings2112: 2 Kings 2:1-12
matthew6161621: Matthew 6:1-6,16-21
2corinthians520b—610: 2 Corinthians 5:20b—6:10
isaiah58112: Isaiah 58:1-12
joel2121217: Joel 2:1-2,12-17
mark1915: Mark 1:9-15
1peter31822: 1 Peter 3:18-22
genesis9817: Genesis 9:8-17
mark83138: Mark 8:31-38
romans41325: Romans 4:13-25
genesis17171516: Genesis 17:1-7,15-16
john21322: John 2:13-22
1corinthians11825: 1 Corinthians 1:18-25
exodus20117: Exodus 20:1-17
john31421: John 3:14-21
ephesians2110: Ephesians 2:1-10
numbers2149: Numbers 21:4-9
john122033: John 12:20-33
hebrews5510: Hebrews 5:5-10
jeremiah313134: Jeremiah 31:31-34
john121216: John 12:12-16
mark11111: Mark 11:1-11
mark151394047: Mark 15:1-39,(40-47)
mark141—1547: Mark 14:1—15:47
philippians2511: Philippians 2:5-11
isaiah5049a: Isaiah 50:4-9a
john12111: John 12:1-11
hebrews91115: Hebrews 9:11-15
isaiah4219: Isaiah 42:1-9
john122036: John 12:20-36
1corinthians11831: 1 Corinthians 1:18-31
isaiah4917: Isaiah 49:1-7
john132132: John 13:21-32
hebrews1213: Hebrews 12:1-3
isaiah5049a: Isaiah 50:4-9a
john1311731b35: John 13:1-17,31b-35
1corinthians112326: 1 Corinthians 11:23-26
exodus12145101114: Exodus 12:1-4,(5-10),11-14
john181—1942: John 18:1—19:42
hebrews41416579: Hebrews 4:14-16; 5:7-9
hebrews101625: Hebrews 10:16-25
isaiah5213—5312: Isaiah 52:13—53:12
john193842: John 19:38-42
matthew275766: Matthew 27:57-66
1peter418: 1 Peter 4:1-8
lamentations3191924: Lamentations 3:1-9,19-24
job14114: Job 14:1-14
mark1618: Mark 16:1-8
john20118: John 20:1-18
1corinthians15111: 1 Corinthians 15:1-11
isaiah2569: Isaiah 25:6-9
acts103443: Acts 10:34-43
mark1618: Mark 16:1-8
john20118: John 20:1-18
1corinthians15111: 1 Corinthians 15:1-11
isaiah2569: Isaiah 25:6-9
acts103443: Acts 10:34-43
mark1618: Mark 16:1-8
john20118: John 20:1-18
1corinthians15111: 1 Corinthians 15:1-11
isaiah2569: Isaiah 25:6-9
acts103443: Acts 10:34-43
luke241349: Luke 24:13-49
1corinthians56b8: 1 Corinthians 5:6b-8
isaiah2569: Isaiah 25:6-9
matthew28915: Matthew 28:9-15
acts21422b32: Acts 2:14,22b-32
john201118: John 20:11-18
acts23641: Acts 2:36-41
luke241335: Luke 24:13-35
acts3110: Acts 3:1-10
luke2436b48: Luke 24:36b-48
acts31126: Acts 3:11-26
john21114: John 21:1-14
acts4112: Acts 4:1-12
mark1691520: Mark 16:9-15,20
acts41321: Acts 4:13-21
john201931: John 20:19-31
1john11—22: 1 John 1:1—2:2
acts43235: Acts 4:32-35
luke2436b48: Luke 24:36b-48
1john317: 1 John 3:1-7
acts31219: Acts 3:12-19
john101118: John 10:11-18
1john31624: 1 John 3:16-24
acts4512: Acts 4:5-12
john1518: John 15:1-8
1john4721: 1 John 4:7-21
acts82640: Acts 8:26-40
john15917: John 15:9-17
1john516: 1 John 5:1-6
acts104448: Acts 10:44-48
luke244453: Luke 24:44-53
ephesians11523: Ephesians 1:15-23
acts1111: Acts 1:1-11
luke244453: Luke 24:44-53
ephesians11523: Ephesians 1:15-23
acts1111: Acts 1:1-11
john17619: John 17:6-19
1john5913: 1 John 5:9-13
acts115172126: Acts 1:15-17,21-26
john73739a: John 7:37-39a
romans814172227: Romans 8:14-17,22-27
acts2111: Acts 2:1-11
joel22832: Joel 2:28-32
ezekiel37114: Ezekiel 37:1-14
exodus1919a1620a201820: Exodus 19:1-9a,16-20a; 20:18-20
genesis1119: Genesis 11:1-9
john152627164b15: John 15:26-27; 16:4b-15
romans82227: Romans 8:22-27
ezekiel37114: Ezekiel 37:1-14
acts2121: Acts 2:1-21
john152627164b15: John 15:26-27; 16:4b-15
romans82227: Romans 8:22-27
ezekiel37114: Ezekiel 37:1-14
acts2121: Acts 2:1-21
john3117: John 3:1-17
romans81217: Romans 8:12-17
isaiah618: Isaiah 6:1-8
mark14045: Mark 1:40-45
1corinthians92427: 1 Corinthians 9:24-27
2kings5114: 2 Kings 5:1-14
mark2112: Mark 2:1-12
2corinthians11822: 2 Corinthians 1:18-22
isaiah431825: Isaiah 43:18-25
mark21322: Mark 2:13-22
2corinthians316: 2 Corinthians 3:1-6
hosea21420: Hosea 2:14-20
deuteronomy51215: Deuteronomy 5:12-15
mark223—36: Mark 2:23—3:6
2corinthians4512: 2 Corinthians 4:5-12
1samuel31101120: 1 Samuel 3:1-10,(11-20)
genesis3815: Genesis 3:8-15
mark32035: Mark 3:20-35
2corinthians413—51: 2 Corinthians 4:13—5:1
1samuel841112151620111415: 1 Samuel 8:4-11(12-15), 16-20,(11:14-15)
ezekiel172224: Ezekiel 17:22-24
mark42634: Mark 4:26-34
2corinthians561011131417: 2 Corinthians 5: 6-10, (11-13),14-17
isamuel1534—1613: I Samuel 15:34—16:13
job38111: Job 38:1-11
mark43541: Mark 4:35-41
2corinthians6113: 2 Corinthians 6:1-13
1samuel1757—1851016: 1 Samuel 17:57— 18:5,10-16
1samuel171a41119233249: 1 Samuel 17:(1a,4-11,19-23),32-49
wisdomofsolomon1131522324: Wisdom of Solomon 1:13-15; 2:23-24
mark52143: Mark 5:21-43
2corinthians8715: 2 Corinthians 8:7-15
2samuel11727: 2 Samuel 1:1,7-27
ezekiel215: Ezekiel 2:1-5
mark6113: Mark 6:1-13
2corinthians12210: 2 Corinthians 12:2-10
2samuel515910: 2 Samuel 5:1-5,9-10
amos7715: Amos 7:7-15
mark61429: Mark 6:14-29
ephesians1314: Ephesians 1:3-14
2samuel61512b19: 2 Samuel 6:1-5,12b-19
jeremiah2316: Jeremiah 23:1-6
mark630345356: Mark 6:30-34,53-56
ephesians21122: Ephesians 2:11-22
2samuel7114a: 2 Samuel 7:1-14a
2kings44244: 2 Kings 4:42-44
john6121: John 6:1-21
ephesians31421: Ephesians 3:14-21
2samuel11115: 2 Samuel 11:1-15
exodus1624915: Exodus 16:2-4,9-15
john62435: John 6:24-35
ephesians4116: Ephesians 4:1-16
2samuel1126—1213a: 2 Samuel 11:26—12:13a
1kings1948: 1 Kings 19:4-8
john6354151: John 6:35,41-51
ephesians425—52: Ephesians 4:25—5:2
2samuel1859153133: 2 Samuel 18:5-9, 15, 31-33
proverbs916: Proverbs 9:1-6
john65158: John 6:51-58
ephesians51520: Ephesians 5:15-20
1kings210123314: 1 Kings 2:10-12; 3:3-14
joshua2412a1418: Joshua 24:1-2a,14-18
john65669: John 6:56-69
ephesians61020: Ephesians 6:10-20
1kings816101122304143: 1 Kings 8:(1,6,10-11), 22-30, 41-43
deuteronomy41269: Deuteronomy 4:1-2, 6-9
mark71814152123: Mark 7:1-8,14-15,21-23
james11727: James 1:17-27
songofsolomon2813: Song of Solomon 2:8-13
isaiah3547a: Isaiah 35:4-7a
mark72437: Mark 7:24-37
james211011131417: James 2:1-10(11-13),14-17
proverbs2212892223: Proverbs 22:1-2, 8-9,22-23
isaiah5049a: Isaiah 50:4-9a
mark82738: Mark 8:27-38
james3112: James 3:1-12
proverbs12033: Proverbs 1:20-33
jeremiah111820: Jeremiah 11:18-20
mark93037: Mark 9:30-37
james313—4378a: James 3:13—4:3,7-8a
proverbs311031: Proverbs 31:10-31
numbers114610162429: Numbers 11:4-6, 10-16,24-29
mark93850: Mark 9:38-50
james51320: James 5:13-20
esther71691092022: Esther 7:1-6,9-10; 9:20-22
genesis21824: Genesis 2:18-24
mark10216: Mark 10:2-16
hebrews1142512: Hebrews 1:1-4; 2:5-12
job112110: Job 1:1;2:1-10
amos5671015: Amos 5:6-7,10-15
mark101731: Mark 10:17-31
hebrews41216: Hebrews 4:12-16
job23191617: Job 23:1-9,16-17
isaiah53412: Isaiah 53:4-12
mark103545: Mark 10:35-45
hebrews5110: Hebrews 5:1-10
job38173441: Job 38:1-7,(34-41)
jeremiah3179: Jeremiah 31:7-9
mark104652: Mark 10:46-52
hebrews72328: Hebrews 7:23-28
job42161017: Job 42:1-6,10-17
deuteronomy619: Deuteronomy 6:1-9
mark122834: Mark 12:28-34
hebrews91114: Hebrews 9:11-14
ruth1118: Ruth 1:1-18
1kings17816: 1 Kings 17:8-16
mark123844: Mark 12:38-44
hebrews92428: Hebrews 9:24-28
ruth31541317: Ruth 3:1-5;4:13-17
daniel1213: Daniel 12:1-3
mark1318: Mark 13:1-8
hebrews10111415181925: Hebrews 10:11-14 (15-18)19-25
1samuel1420: 1 Samuel 1:4-20
daniel79101314: Daniel 7:9-10,13-14
john183337: John 18:33-37
revelation14b8: Revelation 1:4b-8
2samuel2317: 2 Samuel 23:1-7
Parsed 85 records with 295 scripture references
#+end_example
** Get the Holy Days Bible texts
Source = [[http://bible.oremus.org/api.html][oremus api]]
=GET http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=no&omithidden=YES&passage=Mark%201.1-11
#+BEGIN_SRC python :python python3 :results output
  import os, urllib.request, urllib.parse, re, shutil, time
  from bs4 import BeautifulSoup

  def getText(ref):
      requestSlug = "http://bible.oremus.org/?version=NRSVAE&vnum=NO&fnote=NO&show_ref=NO&headings=NO&omithidden=YES&passage={0}"
      contents = urllib.request.urlopen(requestSlug.format(urllib.parse.quote_plus(ref))).read().decode('utf-8')

      # Fix up the contents items I want to handle before BeautifulSoup
      contents = contents.replace("<span class=thinspace> </span>", "")

      soup = BeautifulSoup(contents, 'html.parser')
      bibletext = soup.find('div', {'class': 'bibletext'})
      for br in soup.find_all("br"):
          br.replace_with("BREAK")
      result = ''
      if not bibletext:
          print ("ERROR: no output from oremus")
          return ""
      for line in bibletext.findAll("p"):
         modline = line.text
         modline = re.sub("\n", " ", modline)
         modline = re.sub("  ", " ", modline)
         modline = re.sub(" ", " ", modline) # clean out non-breaking spaces
         modline = re.sub("BREAK", "\n> ", modline) # preserve coded line breaks
         if (len(modline) - modline.count(' ') > 1):
             result += modline.rstrip().rstrip('>').rstrip() + "\n\n"
      result.replace("BREAK", "\n")
      return result.rstrip()

  def textfilename(ref):
      result = re.sub("[-,.:;()\* ]", "", ref)
      return result.casefold()

  dest = "output/readings/nrsv/"
  countRecords = 0
  countRefs = 0
  countDownloads = 0
  countFailures = 0
  refs = []
  os.makedirs(dest, exist_ok=True)

  srcfile = "src/bcprcl-holydays.txt"
  with open(srcfile, "r") as f:
      weekcode = f.readline().rstrip()
      while weekcode:
          # print ("Week found: " + weekcode)
          countRecords += 1
          recdate = f.readline().rstrip() # Date
          recpsalm = f.readline().rstrip() #Psalm
          rectnk = f.readline().rstrip() # Heb Rdg
          recepi = f.readline().rstrip() # Epistle Rdg
          recgos = f.readline().rstrip() # Gospel Rdg
          nextLine = f.readline().rstrip() # Blank
          if nextLine:
              raise Exception("Unexpected input near " + weekcode + ": " + nextLine)

          # Queue up the readings
          for line in [rectnk, recepi, recgos]:
              t = line.partition(" or ")
              if (t[0]) and t[0] not in refs:
                  refs.append(t[0])
              while (t[2]):
                  t = t[2].partition(" or ")
                  if t[0] not in refs:
                      refs.append(t[0])

          countRefs += len(refs)
          while refs:
              r = refs.pop()
              # print (textfilename(r) + ": " + r)
              if not os.path.isfile(dest + textfilename(r)):
                  text = getText(r)
                  if text:
                      with open (dest + textfilename(r), "w") as t:
                          t.write(text)
                  else:
                      countFailures += 1
                  countDownloads += 1

                  time.sleep(1)


          # Start next line
          weekcode = f.readline().rstrip()
  print ("Parsed " + str(countRecords) + " records with " + str(countRefs) + " scripture references, with  " + str(countDownloads) + " downloads and " + str(countFailures) + " failed")
#+END_SRC

#+RESULTS:
: Parsed 35 records with 108 scripture references, with  1 downloads and 0 failed



** Produce Liturgies for 2020 (Yr B, Track 1) in =2020=
Issues:
- Ensure =/he/propercollect= excludes "The Lord be with you" on Good Friday
- Only produce liturgies for future dates
- Check / customize liturgies, Update bcppage for:
    o Good Friday (with special =he/propercollect=)
    o Palm Sunday
    o Easter Vigil
- o Modify contents pages to automatically provide next & previous service (based on liturgydate?)
-  o Access future/all services regardless of date?
- Next year:
    o Epiphany blessings protocol varies in year C
    o Replacement Passion Sunday scripts for C,A
    o Lectionaries for Year C, Year A
    o Year's worth of hymns?

#+BEGIN_SRC python :python python3 :results output
  import csv, os, datetime
  srcfile = "src/liturgy2021.csv"
  targetdir = "output/2021/"
  lectionaryyear = "yearb"

  dateOutputFormat = "%Y-%m-%d"
  dateColumn = 0
  i = 4
  codeColumn = 4
  pageColumn = 5
  titleColumn = 6
  prepareColumn = 7
  psalmStyleColumn = 13
  postscriptColumn = 36

  noSecondReading = ["eastervigil", "eastermonday", "eastertuesday", "easterwednesday", "easterthursday", "easterfriday", "eastersaturday"]

  headings = {
    prepareColumn + 2 : "## We Gather in God's Name",
    psalmStyleColumn  : "## We Hear God's Word",
    psalmStyleColumn + 4 : "## We Respond in Faith",
    psalmStyleColumn + 9 : "## We Offer Ourselves To God",
    psalmStyleColumn + 14 : "## We Receive the Gift of God"
    }

  def shortcode(x):
      if x == "":
          return ""
      return '{{{{% {0} %}}}}\n'.format(x.strip())

  def shortcodeClosed(x):
      return shortcode(x).replace(" %}}", " /%}}")

  def shortcodeRow(x):
      return shortcode(row[x].strip())

  def shortcodeRowClosed(x):
      return shortcodeClosed(row[x].strip())

  os.makedirs(targetdir, exist_ok=True)

  count=0
  with open(srcfile, "r") as f:
      reader = csv.reader(f)
      next(reader) # skip header line
      for row in reader:
          if row[dateColumn] == "": continue # Skip unused rows
          code = row[codeColumn].strip()
          rowDate = datetime.datetime.strptime(row[dateColumn], '%m/%d/%y')
          if rowDate.date() <= datetime.date.today(): continue # Skip past & current dates
          # print("DEBUG: Found date {0}".format(rowDate))
          # filename = 'he-{1}.md'.format(rowDate, code)
          # if (code == "goodfriday" or code == "holysaturday"):
              # filename = '{0}-{1:%Y%m%d}.md'.format(code, rowDate)
          with open (targetdir + "/" + code + ".md", "w") as t:
              t.write('---\n')
              if (code == "goodfriday" or code == "holysaturday"):
                  t.write('title: {}\n'.format(row[titleColumn].strip()))
              else:
                  t.write('title: Holy Eucharist, Rite II ({0})\n'.format(row[titleColumn].strip()))
              liturgyDate = rowDate.strftime(dateOutputFormat)
              t.write('date: {0}\n'.format(liturgyDate))
              # publishDate = (rowDate + datetime.timedelta(days=-6)).strftime(dateOutputFormat)
              # t.write('publishdate: {0}\n'.format(publishDate))
              t.write('lectionaryyear: {0}\n'.format(lectionaryyear))
              t.write('proper: {0}\n'.format(code))
              t.write('bcppage: {0}ff.\n'.format(row[pageColumn].strip()))
              t.write('---\n')
              for i in range(prepareColumn + 1, postscriptColumn):
                  if (i == psalmStyleColumn and code != "goodfriday"):
                      t.write(shortcode('he/propercollect'))
                      t.write(shortcode('rubric-sit'))

                  if (headings.get(i)):
                      if (i<=psalmStyleColumn or code != "goodfriday"):
                          t.write('\n' + headings.get(i) + '\n')

                  if (i == psalmStyleColumn):
                      t.write(shortcodeClosed('he/lesson "firstReading"'))
                      t.write(shortcodeRowClosed(psalmStyleColumn))
                      if (not code in noSecondReading):
                          t.write(shortcodeClosed('he/lesson "secondReading"'))
                      if (code != "goodfriday"):
                          t.write(shortcodeClosed('he/gospel'))
                  elif ("he/eucharisticprayer/" in row[i]):
                      t.write(shortcodeRowClosed(i))
                  else:
                      t.write(shortcodeRow(i))
              t.write(shortcode('nrsv'))
          count+=1
  print ("Wrote " + str(count) + " records.")
#+END_SRC

#+RESULTS:
: Wrote 72 records.

**
